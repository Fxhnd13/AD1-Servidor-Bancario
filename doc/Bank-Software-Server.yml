swagger: "2.0"
info:
  description: "API sobre el servidor bancario de analisis y diseño 1"
  version: "1.0.0"
  title: "Sistema bancario"
host: "analisis-bank-server.herokuapp.com"
basePath: "/"
tags:
- name: 'User'
  description: 'Todo sobre manejo de usuarios'
- name: 'Request'
  description: 'Todo sobre manejo de solicitudes'
- name: 'Authentication'
  description: 'Todo sobre autenticación de usuarios'
- name: 'Person'
  description: 'Todo sobre manejo de personas'
- name: 'Database'
  description: 'Todo sobre manejo de base de datos (Para desarrolladores)'
- name: 'Email'
  description: 'Todo sobre manejo de correos electrónicos'
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - 'User'
      summary: 'Crea un nuevo usuario en la base de datos'
      parameters:
        - in: body
          name: username
          description: Username del usuario a crear
          required: true
          schema:
            type: string
            example: user1
        - in: body
          name: password
          description: Contraseña del usuario a crear
          required: true
          schema: 
            type: string
            example: pass
        - in: body
          name: user_type
          description: Tipo del usuario a crear
          required: true
          schema:
            type: integer
            items: 
              enum:
                - 1
                - 2
                - 3
                - 4
            example: 1
        - in: body
          name: cui
          description: Cui del usuario a crear
          required: true
          schema: 
            type: integer
            example: 2973852161001
        - in: header
          type: string
          name: token
      responses:
        '200':
          description: Se creo el usuario en la base de datos'
          schema:
            type: object
            properties: 
              information_message:
                type: string
        '400':
          description: No existe una cuenta bancaria al crear usuario de tipo cliente
          schema:
            type: object
            properties: 
              information_message:
                type: string
        '401':
          description: Token de inicio de sesion expirado
          schema:
            type: object
            properties: 
              information_message:
                type: string
    put: 
      tags: ['User']
      summary: Actualiza la contraseña de un usuario
      parameters:
        - in: body
          name: old_password
          description: Antigua contraseña para verificar identidad
          required: true
          schema:
            type: string
        - in: body
          name: new_password
          description: Nueva contraseña (La que se desea tener de ahora en adelante)
          required: true
          schema:
            type: string
        - in: header
          name: token
          type: string
      responses:
        '200':
          description: ok
          schema:
            type: object
            properties: 
              information_message:
                type: string
        '401':
          description: Token de sesion expirado
          schema:
            type: object
            properties: 
              information_message:
                type: string
        '403':
          description: Contraseña no coincide o no se realizaron modificaciones
          schema:
            type: object
            properties: 
              information_message:
                type: string
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"